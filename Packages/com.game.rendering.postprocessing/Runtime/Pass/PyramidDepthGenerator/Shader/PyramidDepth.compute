#pragma kernel CSCopyTexture
#pragma kernel CSReduceTexture

#define GPUI_THREADS_2D 16

uniform int reverseZ;
uniform Texture2D<float4> source;
uniform SamplerState sampler_source;
uniform RWTexture2D<float4> destination;
uniform uint sourceSizeX, sourceSizeY;
uniform uint destinationSizeX, destinationSizeY;

[numthreads(GPUI_THREADS_2D, GPUI_THREADS_2D, 1)]
void CSCopyTexture(uint2 id : SV_DispatchThreadID)
{
    if (id.x >= sourceSizeX || id.y >= sourceSizeY)
        return;
    
    float4 color = source[id.xy];

    #if SHADER_API_GLCORE || SHADER_API_GLES3
        if (reverseZ)
            color.r = 1 - color.r;
    #endif

    destination[id.xy] = color;
}

[numthreads(GPUI_THREADS_2D, GPUI_THREADS_2D, 1)]
void CSReduceTexture(uint2 id : SV_DispatchThreadID)
{
    if (id.x >= destinationSizeX || id.y >= destinationSizeY)
        return;
    
    float2 uv = float2((id.x + 0.5) / destinationSizeX, (id.y + 0.5) / destinationSizeY);
    
    float4 r;
    r.x = source.SampleLevel(sampler_source, uv + float2(1.0 / sourceSizeX, 0), 0).r;
    r.y = source.SampleLevel(sampler_source, uv + float2(-1.0 / sourceSizeX, 0), 0).r;
    r.z = source.SampleLevel(sampler_source, uv + float2(0, 1.0 / sourceSizeY), 0).r;
    r.w = source.SampleLevel(sampler_source, uv + float2(0, -1.0 / sourceSizeY), 0).r;
    
    float minimum = min(min(min(r.x, r.y), r.z), r.w);
    
    destination[id.xy] = float4(minimum, 1.0, 1.0, 1.0);
}
